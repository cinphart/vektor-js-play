* Introduction

  This is a first attempt at Vektor, a lowest common denominator
  wrapping of SVG and VML for angular JS, with the intent of providing
  behavior roughly analogous to a hybrid of RaphaelJS and d3.js, but
  building purely on top of angular js.

* Status

  So far, this is just some simple attempts at wrapping some VML in
  angular directives. In fact, at the moment, it's just taking
  existing VML elements, and creating a single 'interpolateable' (is
  there such a word?) attribute for the fillcolor attribute, which
  doesn't seem to play well with AngularJS right now - in particular,
  it seems to be a property rather than an attribute, so putting an
  expression in the attribute doesn't appear to work well.

  Note that I'm just testing this in IE9, and hoping that it will work
  similarly in IE8 and earlier - I will try it out on IE7/8 when/if I
  get a chance.

* Next Steps

** TODO implement simple VML wrapper directives
  
   Create some simplistic wrapper directives within the angular JS
   framework to allow position, color and size of for example a
   rectangle and a oval to be determined by an angular controller

   One thing to look at here might be to create something that looks
   like a simplified subset of SVG, so that the wrapper can
   essentially be forward compatible with SVG.

   It would be necessary in this case to create a very basic subset of
   SVG in angular directives, which could be an interesting experiment
   at the very least.

   Note that the intent would be only to create a limited set of the
   functionality of SVG, hopefully enough to allow the creation of
   useful cross-browser widgets with vector portions entirely in
   angularjs.

   A stretch goal (initially at least) would be to end up with
   something that could take the [[https://github.com/sullerandras/SVG-Sequence-Diagram][sequence diagram example for
   angularjs]] basically unchanged...

** TODO implement feature detection to determine the implementation to use.

   Whatever happens, we'll have to create (or steal, from RaphaelJS)
   something to detect the absence of VML and the presence of SVG.

   Ideally, the final version will basically inherit allow you to use
   a reasonably useful subset of the SVG syntax, but have it rendered
   correctly in browsers that both do and don't support SVG.
